import tailwindcss from '@tailwindcss/vite';
import devtoolsJson from 'vite-plugin-devtools-json';
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';
// import wasm from 'vite-plugin-wasm';

import fs from 'fs/promises';
import path from 'path';

function compileWasmToModule() {
	return {
		name: 'compile-resvg-wasm',
		enforce: 'pre' as const,

		async load(id: string) {
			if (id.endsWith('index_bg.wasm')) {
				const wasmPath = path.resolve(id);
				const bytes = await fs.readFile(wasmPath);
				new WebAssembly.Module(bytes);

				// Export the precompiled module
				return {
					code: [
						`// auto-generated by compile-resvg-wasm`,
						`const wasmModule = /* precompiled WebAssembly.Module */`,
						`  new WebAssembly.Module(new Uint8Array([${[...bytes].join(',')}]))`,
						`export default wasmModule;`
					].join('\n'),
					map: null
				};
			}
		}
	};
}

export default defineConfig({
	plugins: [compileWasmToModule(), tailwindcss(), sveltekit(), devtoolsJson()],
	// bundle @resvg/resvg-wasm into SSR (Edge) output
	ssr: {
		noExternal: ['@resvg/resvg-wasm']
	},
	assetsInclude: ['**/*.wasm'],
	test: {
		projects: [
			{
				extends: './vite.config.ts',
				test: {
					name: 'client',
					environment: 'browser',
					browser: {
						enabled: true,
						provider: 'playwright',
						instances: [{ browser: 'chromium' }]
					},
					include: ['src/**/*.svelte.{test,spec}.{js,ts}'],
					exclude: ['src/lib/server/**'],
					setupFiles: ['./vitest-setup-client.ts']
				}
			},
			{
				extends: './vite.config.ts',
				test: {
					name: 'server',
					environment: 'node',
					include: ['src/**/*.{test,spec}.{js,ts}'],
					exclude: ['src/**/*.svelte.{test,spec}.{js,ts}']
				}
			}
		]
	}
});
